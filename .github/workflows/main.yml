# Workflow name
name: Build Kivy APK

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main/master branches
  push:
    branches: [ main, master ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # 3. Cache the Buildozer global directory
    - name: Cache Buildozer global directory
      uses: actions/cache@v3
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-

    # 4. Install essential system dependencies and JDK
    - name: Install system dependencies and JDK
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          git \
          zip \
          unzip \
          build-essential \
          libffi-dev \
          libssl-dev \
          liblzma-dev \
          zlib1g-dev \
          python3-pip \
          python3-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libgl1-mesa-dev \
          libgles2-mesa-dev \
          openjdk-17-jdk
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*

    # 5. Install Autotools and Libtool support (fix for LT_SYS_SYMBOL_USCORE)
    - name: Install Autotools and Libtool support
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          autoconf \
          automake \
          libtool \
          libltdl-dev \
          pkg-config
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*

    # 6. Download and set up the Android SDK command-line tools
    - name: Install Android SDK Command-line Tools
      env:
        CMDLINE_TOOLS_VERSION: "11076708"
        ANDROID_SDK_ROOT: "${{ github.workspace }}/android-sdk"
      run: |
        mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
        wget -q "https://dl.google.com/android/repository/commandlinetools-linux-${CMDLINE_TOOLS_VERSION}_latest.zip" -O cmdline-tools.zip
        unzip -q cmdline-tools.zip -d "${ANDROID_SDK_ROOT}/cmdline-tools"
        rm cmdline-tools.zip
        # Normalize directory structure
        if [ -d "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools" ]; then
          mv "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools/"* "${ANDROID_SDK_ROOT}/cmdline-tools/latest/"
          rm -rf "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools"
        else
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools/latest"
          find "${ANDROID_SDK_ROOT}/cmdline-tools" -maxdepth 1 -mindepth 1 ! -name 'latest' -exec mv -t "${ANDROID_SDK_ROOT}/cmdline-tools/latest/" {} +
        fi
        # Export variables for subsequent steps
        echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}" >> $GITHUB_ENV
        echo "PATH=${PATH}:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${ANDROID_SDK_ROOT}/platform-tools" >> $GITHUB_ENV

    # 7. Install Android SDK components and NDK
    - name: Install Android SDK components and NDK
      env:
        ANDROID_PLATFORM_VERSION: "34"
        ANDROID_BUILD_TOOLS_VERSION: "34.0.0"
        ANDROID_NDK_VERSION: "25.2.9519653"
      run: |
        yes | sdkmanager --licenses
        sdkmanager "platform-tools" "platforms;android-${ANDROID_PLATFORM_VERSION}" "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" "ndk;${ANDROID_NDK_VERSION}"
        echo "ANDROID_NDK_HOME=${{ github.workspace }}/android-sdk/ndk/${ANDROID_NDK_VERSION}" >> $GITHUB_ENV

    # 8. Link Android SDK root for Buildozer
    - name: Link Android SDK for Buildozer
      run: |
        mkdir -p $HOME/.buildozer/android/platform
        rm -rf $HOME/.buildozer/android/platform/android-sdk
        ln -s "${{ github.workspace }}/android-sdk" $HOME/.buildozer/android/platform/android-sdk

    # 9. Accept Android SDK Licenses for Buildozer
    - name: Accept Android SDK Licenses
      run: |
        yes | $HOME/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/.buildozer/android/platform/android-sdk --licenses

    # 10. Install/Upgrade Buildozer and Cython
    - name: Install/Upgrade Buildozer and Cython
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install cython
        pip install --upgrade buildozer

    # 11. Clean previous build artifacts (optional)
    - name: Clean previous build artifacts
      run: |
        buildozer clean || echo "Nothing to clean"

    # 12. Build APK with Buildozer
    - name: Build APK with Buildozer
      run: |
        echo "Starting Buildozer build..."
        buildozer -v android debug

    # 13. Upload the generated APK as a build artifact
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: kivy-app-apk
        path: bin/*.apk
